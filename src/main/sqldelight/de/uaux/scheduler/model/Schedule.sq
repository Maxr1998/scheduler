CREATE TABLE Schedule (
    -- Contains semester in the format <year><1>/<2>
    -- e.g. 20211 for SS2021 and 20212 for WS21/22
    semester INTEGER AS Int NOT NULL,
    event INTEGER NOT NULL REFERENCES Event(id) ON DELETE CASCADE,
    day INTEGER AS Int NOT NULL,
    start_time INTEGER AS Int NOT NULL,
    -- No enforced reference on table Room to allow 'meta'-rooms like online lectures
    room INTEGER NOT NULL,
    UNIQUE (semester, event, day, start_time),
    CHECK (semester % 10 = 1 OR semester % 10 = 2),
    CHECK (day BETWEEN 1 AND 7),
    CHECK (start_time BETWEEN 0 AND 1439)
);

CREATE INDEX idx_schedule_semester ON Schedule (semester);
CREATE INDEX idx_schedule_event ON Schedule (event);
CREATE INDEX idx_schedule_room ON Schedule (room);

CREATE TABLE ScheduleCount (
    -- Contains semester in the format <year><1>/<2>
    -- e.g. 20211 for SS2021 and 20212 for WS21/22
    semester INTEGER AS Int NOT NULL,
    event INTEGER NOT NULL REFERENCES Event(id) ON DELETE CASCADE,
    count INTEGER AS Int NOT NULL,
    -- If count is 1, no entry is necessary
    CHECK (count > 1)
);

CREATE INDEX idx_schedule_count_semester ON ScheduleCount (semester);
CREATE INDEX idx_schedule_count_event ON ScheduleCount (event);

insert:
INSERT INTO Schedule VALUES ?;

queryAllSemesters:
SELECT DISTINCT s.semester FROM Schedule s ORDER BY s.semester DESC;

queryScheduledEventsInStudycourseBySemester:
SELECT e.*, se.semester AS studycourseSemester, se.required, s.day, s.start_time AS startTime, s.room
FROM StudycourseEvent se JOIN Event e JOIN Schedule s ON se.event = e.id AND e.id = s.event
WHERE se.studycourse = ? AND s.semester = ?
ORDER BY s.day, s.start_time, e.duration DESC;

queryUnscheduledEventsInStudycourseBySemester:
SELECT e.*, se.semester AS studycourseSemester, se.required, coalesce(sc.count, 1) - count(s.semester) AS remaining
FROM Event e
    JOIN StudycourseEvent se ON e.id = se.event
    LEFT JOIN ScheduleCount sc ON e.id = sc.event
    LEFT JOIN Schedule s ON e.id = s.event
WHERE se.studycourse = ? AND (sc.semester IS NULL OR sc.semester = ?) AND (s.semester IS NULL OR s.semester = ?)
-- TODO: missing 'remaining > 0' due to bug in SQLdelight
GROUP BY e.id, e.name
ORDER BY e.name;

rescheduleEvent:
UPDATE Schedule
SET day = :newDay, start_time = :newStart
WHERE semester = ? AND event = ? AND day = ? AND start_time = ?;

unscheduleEvent:
DELETE FROM Schedule
WHERE semester = ? AND event = ? AND day = ? AND start_time = ?;